@DSL ImplicitFiniteStrain;
@Behaviour CrystalPlasticityDislocationUpdate;
@Author Nicol√≤ Grilli;
@Date 17 / 08 / 2023;
@Description {
The MFront version of the dislocation density evolution model
based on dislocation multiplication and annihilation
with Armstrong-Frederick backstress evolution.
The model parameters are calibrated for 316H stainless steel at 550 C
Original source code here:
https://github.com/ngrilli/c_pfor_am/blob/main/src/materials/CrystalPlasticityDislocationUpdate.C
}

@ModellingHypothesis Tridimensional;

@OrthotropicBehaviour;
@RequireStiffnessTensor;

@Algorithm NewtonRaphson;
@Epsilon 1.e-14;
@Theta 1;

@Brick FiniteStrainSingleCrystal{
  shifted_elastic_deformation_gradient : true
};

@CrystalStructure FCC;
@SlidingSystem<0, 1, -1>{1, 1, 1};

// mfront-query --interaction-matrix CrystalPlasticityDislocationUpdate.mfront 
// mfront-query --interaction-matrix-structure CrystalPlasticityDislocationUpdate.mfront 
// 0: self-hardening: a system with itself
// 1: coplanar: same slip plane but different Burgers vector
@InteractionMatrix{1, 1, 1.4, 1.4, 1.4, 1.4, 1.4};

// Dislocation based model parameters
@MaterialProperty real ao; // Slip rate coefficient 
@MaterialProperty real xm; // Exponent for slip rate
@MaterialProperty real creep_ao; // Creep rate coefficient 
@MaterialProperty real creep_xm; // Exponent for creep rate
@MaterialProperty real burgers_vector_mag; // Magnitude of the Burgers' vector
@MaterialProperty real shear_modulus; // Shear modulus in Taylor hardening law G
@MaterialProperty real alpha_0; // Prefactor of Taylor hardening law, alpha
@MaterialProperty real r; // Latent hardening coefficient
@MaterialProperty real tau_c_0; // Peierls stress
@MaterialProperty real k_0; // Coefficient K in SSD evolution, representing accumulation rate
@MaterialProperty real y_c; // Critical annihilation diameter
@MaterialProperty real h; // Direct hardening coefficient for backstress
@MaterialProperty real h_D; // Dynamic recovery coefficient for backstress
@MaterialProperty real init_rho_ssd; // Initial dislocation density on each slip system

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

// State variables of the dislocation model
// This is the increase in the dislocation density
@AuxiliaryStateVariable strain delta_rho_ssd[Nss];
delta_rho_ssd.setEntryName("delta_rho_ssd");

@Integrator {
  using size_type = unsigned short;
  
  // interaction matrix m
  const auto& m = ss.him;
  
  // Numerical precisions
  constexpr const auto eeps = 1.e-12;
  const auto seps = eeps * D(0, 0);
  
  // Loop over the slip systems
  for (size_type i = 0; i != Nss; ++i) {
  
    // Resolved shear stress
    const auto tau = M | ss.mu[i];
    
    // sum of the dislocation densities
    // weighted with hardening
    auto taylor_hardening = 0.0;
    
    // Effective stress
    const auto effective_stress = abs(tau);
    
    // Slip resistance
    auto slip_resistance = tau_c_0;
    
    for (size_type j = 0; j != Nss; ++j) {
    
      taylor_hardening += m(i,j) * (init_rho_ssd + delta_rho_ssd[j]);
    
    }
    
    slip_resistance += alpha_0 * shear_modulus * burgers_vector_mag * std::sqrt(taylor_hardening);
    
    // Derivative of the slip resistance with respect to gammadot
    // of the same slip system
    auto dslip_resistance_dgammadoti = 0.5 * alpha_0 * shear_modulus * burgers_vector_mag / std::sqrt(taylor_hardening);
    auto drho_ssd_dgammadoti = (k_0 * std::sqrt(init_rho_ssd + delta_rho_ssd[i]) - 2.0 * y_c * (init_rho_ssd + delta_rho_ssd[i])) / burgers_vector_mag;
    dslip_resistance_dgammadoti *= m(i,i) * drho_ssd_dgammadoti;
    
    auto stress_ratio = effective_stress / slip_resistance;
    
    // Check that stress does not become too large
    // compared with yield strength
    if (stress_ratio > 2) {
      return false;
    }
    
    // Sign of the critical resolved shear stress
    const auto sgn = tau > 0 ? 1 : -1;
    
    // Power low slip rate exponent
    auto n = 1.0 / xm;
    
    // Plastic strain rate calculations
    const auto v = ao * pow(stress_ratio, n);
    const auto dv = n * ao * pow(stress_ratio, n-1) / slip_resistance;
    
    // Residual of gammadot variable
    fg[i] -= dt * v * sgn;
    
    // and its derivative with respect to elastic strain
    dfg_ddeel(i) = -dt * dv * (ss.mu[i] | dM_ddeel);
    
    // and its derivative with respect to the gammadot
    // of the same slip system
    // This expression causes convergence problems
    //dt * n * ao * (pow(stress_ratio, n) / slip_resistance) * sgn * dslip_resistance_dgammadoti;
    dfg_ddg(i, i) += 0.0; 
    
    auto dslip_resistance_dgammadotj = 0.5 * alpha_0 * shear_modulus * burgers_vector_mag / std::sqrt(taylor_hardening);
    
    for (size_type j = 0; j != Nss; ++j) {
    
      auto drho_ssd_dgammadotj = (k_0 * std::sqrt(init_rho_ssd + delta_rho_ssd[j]) - 2.0 * y_c * (init_rho_ssd + delta_rho_ssd[j])) / burgers_vector_mag;
      dslip_resistance_dgammadotj *= m(i,j) * drho_ssd_dgammadotj;

      // This expression causes convergence problems
      // dt * n * ao * (pow(stress_ratio, n) / slip_resistance) * sgn * dslip_resistance_dgammadotj;
      dfg_ddg(i, j) += 0.0; 
    }
  } // End loop over slip systems
}

// Update p and delta_rho_ssd
@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    
    p[i] += abs(dg[i]);
    
    delta_rho_ssd[i] += (k_0 * std::sqrt(init_rho_ssd + delta_rho_ssd[i]) - 2.0 * y_c * (init_rho_ssd + delta_rho_ssd[i])) * abs(dg[i]) / burgers_vector_mag;
    
  }
}
