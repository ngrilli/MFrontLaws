/*!
* \file   include/TFEL/Material/CrystalPlasticityDislocationUpdateSlipSystems.hxx
* \brief  this file decares the CrystalPlasticityDislocationUpdateSlipSystems class.
*         File generated by tfel version 3.4.0
* \author Nicol√≤ Grilli
* \date   17 / 08 / 2023
 */

#ifndef LIB_TFEL_MATERIAL_CRYSTALPLASTICITYDISLOCATIONUPDATESLIPSYSTEMS_HXX
#define LIB_TFEL_MATERIAL_CRYSTALPLASTICITYDISLOCATIONUPDATESLIPSYSTEMS_HXX

#if (defined _WIN32 || defined _WIN64)
#ifdef min
#undef min
#endif /* min */
#ifdef max
#undef max
#endif /* max */
#ifdef small
#undef small
#endif /* small */
#endif /* (defined _WIN32 || defined _WIN64) */

#include"TFEL/Raise.hxx"
#include"TFEL/Math/tvector.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/tensor.hxx"

namespace tfel{

namespace material{

template<typename real>
struct CrystalPlasticityDislocationUpdateSlipSystems
{
//! a simple alias
using tensor = tfel::math::tensor<3u,real>;
//! a simple alias
using vector = tfel::math::tvector<3u,real>;
//! a simple alias
using stensor = tfel::math::stensor<3u,real>;
//! number of sliding systems
static constexpr const unsigned short Nss = 12;
//! number of sliding systems (first and uniq family)
static constexpr const unsigned short Nss0 = 12;
//! tensor of directional sense
tfel::math::tvector<Nss,tensor> mu;
//! symmetric tensor of directional sense
tfel::math::tvector<Nss,stensor> mus;
//! normal to slip plane
tfel::math::tvector<Nss,vector> np;
//! unit vector in the slip direction
tfel::math::tvector<Nss,vector> ns;
//! tensor of directional sense
tfel::math::tvector<Nss0,tensor> mu0;
//! symmetric tensor of directional sense
tfel::math::tvector<Nss0,stensor> mus0;
//! normal to slip plane
tfel::math::tvector<Nss0,vector> np0;
//! unit vector in the slip direction
tfel::math::tvector<Nss0,vector> ns0;
//! interaction matrix
tfel::math::tmatrix<Nss,Nss,real> mh;
//! interaction matrix
tfel::math::tmatrix<Nss,Nss,real> him;
/*!
 * \return true if two systems are coplanar
 * \param[in] i: first slip system index
 * \param[in] j: second slip system index
 */
bool areCoplanar(const unsigned short,
                 const unsigned short) const;
//! return the unique instance of the class
static const CrystalPlasticityDislocationUpdateSlipSystems&
getSlidingSystems();
//! return the unique instance of the class
static const CrystalPlasticityDislocationUpdateSlipSystems&
getSlipSystems();
//! return the unique instance of the class
static const CrystalPlasticityDislocationUpdateSlipSystems&
getGlidingSystems();
private:
//! Constructor
CrystalPlasticityDislocationUpdateSlipSystems();
//! move constructor (disabled)
CrystalPlasticityDislocationUpdateSlipSystems(CrystalPlasticityDislocationUpdateSlipSystems&&) = delete;
//! copy constructor (disabled)
CrystalPlasticityDislocationUpdateSlipSystems(const CrystalPlasticityDislocationUpdateSlipSystems&) = delete;
//! move operator (disabled)
CrystalPlasticityDislocationUpdateSlipSystems&
operator=(CrystalPlasticityDislocationUpdateSlipSystems&&) = delete;
//! copy constructor (disabled)
CrystalPlasticityDislocationUpdateSlipSystems&
operator=(const CrystalPlasticityDislocationUpdateSlipSystems&) = delete;
}; // end of struct CrystalPlasticityDislocationUpdateSlipSystems

//! a simple alias
template<typename real>
using CrystalPlasticityDislocationUpdateSlidingSystems = CrystalPlasticityDislocationUpdateSlipSystems<real>;

//! a simple alias
template<typename real>
using CrystalPlasticityDislocationUpdateGlidingSystems = CrystalPlasticityDislocationUpdateSlipSystems<real>;

} // end of namespace material

} // end of namespace tfel

#include"TFEL/Material/CrystalPlasticityDislocationUpdateSlipSystems.ixx"

#endif /* LIB_TFEL_MATERIAL_CRYSTALPLASTICITYDISLOCATIONUPDATESLIPSYSTEMS_HXX */
