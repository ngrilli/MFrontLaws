@DSL ImplicitFiniteStrain;
@Behaviour CrystalPlasticityDislocationUpdate;
@Author Nicol√≤ Grilli;
@Date 17 / 08 / 2023;
@Description {
The MFront version of the dislocation density evolution model
based on dislocation multiplication and annihilation
with Armstrong-Frederick backstress evolution.
The model parameters are calibrated for 316H stainless steel at 550 C
Original source code here:
https://github.com/ngrilli/c_pfor_am/blob/main/src/materials/CrystalPlasticityDislocationUpdate.C
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;

@Algorithm NewtonRaphson;
@Epsilon 1.e-14;
@Theta 1;

// MPa units
@Brick FiniteStrainSingleCrystal{
  young_modulus1 : 93812.45,
  young_modulus2 : 93812.45,
  young_modulus3 : 93812.45,
  poisson_ratio12 : 0.40228,
  poisson_ratio23 : 0.40228,
  poisson_ratio13 : 0.40228,
  shear_modulus12 : 126200.0,
  shear_modulus23 : 126200.0,
  shear_modulus13 : 126200.0
};

@CrystalStructure FCC;
@SlidingSystem<0, 1, -1>{1, 1, 1};

// mfront-query --interaction-matrix CrystalPlasticityDislocationUpdate.mfront 
// mfront-query --interaction-matrix-structure CrystalPlasticityDislocationUpdate.mfront 
// 0: self-hardening: a system with itself
// 1: coplanar: same slip plane but different Burgers vector
@InteractionMatrix{1, 1, 1.4, 1.4, 1.4, 1.4, 1.4};

// TO DO

@Parameter n = 10.0;
@Parameter K = 25.;
@Parameter tau0 = 66.62;
@Parameter Q = 11.43;
@Parameter b = 2.1;
@Parameter d = 494.0;
@Parameter C = 14363;

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

@AuxiliaryStateVariable strain a[Nss];
a.setEntryName("BackStrain");

@Integrator {
  using size_type = unsigned short;
  const auto& m = ss.him;
  constexpr const auto eeps = 1.e-12;
  const auto seps = eeps * D(0, 0);
  real exp_bp[Nss];
  for (size_type i = 0; i != Nss; ++i) {
      const auto p_ = p[i] + theta * abs(dg[i]);
      exp_bp[i] = exp(-b * p_);
  }
  for (size_type i = 0; i != Nss; ++i) {
    const auto tau = M | ss.mu[i];
    auto r = tau0;
    for (size_type j = 0; j != Nss; ++j) {
      r += Q * m(i, j) * (1 - exp_bp[j]);
    }
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    const auto x = C * (a[i] + theta * da);
    const auto f = max(abs(tau - x) - r, stress(0));
    if (f > 1.1 * K) {
      return false;
    }
    const auto sgn = tau - x > 0 ? 1 : -1;
    // viscoplasticity
    const auto v = pow(f / K, n);
    const auto dv = n * v / (max(f, seps));
    fg[i] -= dt * pow(f / K, n) * sgn;
    dfg_ddeel(i) = -dt * dv * (ss.mu[i] | dM_ddeel);
    const auto sgn_gi = dg(i) > 0 ? 1 : -1;
    const auto dda_ddg =
        (1 - d * a[i] * sgn_gi) / (power<2>(1 + theta * d * abs(dg[i])));
    dfg_ddg(i, i) += dt * dv * C * theta * dda_ddg;
    for (size_type j = 0; j != Nss; ++j) {
      const auto sgn_gj = dg(j) > 0 ? 1 : -1;
      const auto dr = Q * m(i, j) * theta * b * exp_bp[j] * sgn_gj;
      dfg_ddg(i, j) += dt * dv * dr * sgn;
    }
  }
}

@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    p[i] += abs(dg[i]);
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    a[i] += da;
  }
}
