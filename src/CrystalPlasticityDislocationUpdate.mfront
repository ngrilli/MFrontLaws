@DSL ImplicitFiniteStrain;
@Behaviour CrystalPlasticityDislocationUpdate;
@Author Nicol√≤ Grilli;
@Date 17 / 08 / 2023;
@Description {
The MFront version of the dislocation density evolution model
based on dislocation multiplication and annihilation
with Armstrong-Frederick backstress evolution.
The model parameters are calibrated for 316H stainless steel at 550 C
Original source code here:
https://github.com/ngrilli/c_pfor_am/blob/main/src/materials/CrystalPlasticityDislocationUpdate.C
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;

@Algorithm NewtonRaphson;
@Epsilon 1.e-14;
@Theta 1;

// MPa units
@Brick FiniteStrainSingleCrystal{
  young_modulus1 : 93812.45,
  young_modulus2 : 93812.45,
  young_modulus3 : 93812.45,
  poisson_ratio12 : 0.40228,
  poisson_ratio23 : 0.40228,
  poisson_ratio13 : 0.40228,
  shear_modulus12 : 126200.0,
  shear_modulus23 : 126200.0,
  shear_modulus13 : 126200.0
};

@CrystalStructure FCC;
@SlidingSystem<0, 1, -1>{1, 1, 1};

// mfront-query --interaction-matrix CrystalPlasticityDislocationUpdate.mfront 
// mfront-query --interaction-matrix-structure CrystalPlasticityDislocationUpdate.mfront 
// 0: self-hardening: a system with itself
// 1: coplanar: same slip plane but different Burgers vector
@InteractionMatrix{1, 1, 1.4, 1.4, 1.4, 1.4, 1.4};

// Dislocation based model parameters
@Parameter ao = 0.001; // Slip rate coefficient 
@Parameter xm = 0.1; // Exponent for slip rate
@Parameter creep_ao = 0.0; // Creep rate coefficient 
@Parameter creep_xm = 0.1; // Exponent for creep rate
@Parameter burgers_vector_mag = 0.000256; // Magnitude of the Burgers' vector
@Parameter shear_modulus = 86000.0; // Shear modulus in Taylor hardening law G
@Parameter alpha_0 = 0.3; // Prefactor of Taylor hardening law, alpha
@Parameter r = 1.4; // Latent hardening coefficient
@Parameter tau_c_0 = 0.112; // Peierls stress
@Parameter k_0 = 1.13; // Coefficient K in SSD evolution, representing accumulation rate
@Parameter h = 0.0; // Direct hardening coefficient for backstress
@Parameter h_D = 0.0; // Dynamic recovery coefficient for backstress

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

// @AuxiliaryStateVariable strain a[Nss];
// a.setEntryName("BackStrain");

// State variables of the dislocation model
@AuxiliaryStateVariable strain rho_ssd[Nss];
rho_ssd.setEntryName("rho_ssd");

// TO DO

@Integrator {
  using size_type = unsigned short;
  
  // interaction matrix m
  const auto& m = ss.him;
  
  // Numerical precisions
  constexpr const auto eeps = 1.e-12;
  const auto seps = eeps * D(0, 0);
  
  
  // real exp_bp[Nss];
  // for (size_type i = 0; i != Nss; ++i) {
  //     const auto p_ = p[i] + theta * abs(dg[i]);
  //     exp_bp[i] = exp(-b * p_);
  // }
  
  
  // Loop over the slip systems
  for (size_type i = 0; i != Nss; ++i) {
  
    // Resolved shear stress
    const auto tau = M | ss.mu[i];
    
    // sum of the dislocation densities
    // weighted with hardening
    auto taylor_hardening = 0.0;
    
    // Effective stress
    const auto effective_stress = abs(tau);
    
    // Slip resistance
    auto slip_resistance = tau_c_0;
    
    for (size_type j = 0; j != Nss; ++j) {
    
      taylor_hardening += m(i,j) * rho_ssd[j];
    
    }
    
    slip_resistance += alpha_0 * shear_modulus * burgers_vector_mag * std::sqrt(taylor_hardening);
    
    auto stress_ratio = abs(tau / slip_resistance);
    

    // r is the slip resistance
    // auto r = tau0;
    
    // for (size_type j = 0; j != Nss; ++j) {
    //   r += Q * m(i, j) * (1 - exp_bp[j]);
    // }
    
    // const auto da =  //
    //    (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    // const auto x = C * (a[i] + theta * da);
    
    
    // Effective stress
    // const auto effective_stress = abs(tau - x)
    // const auto f = max(abs(tau - x) - r, stress(0));
    // f is the stress ratio
    
    // Check that stress does not become too large
    // compared with yield strength
    if (stress_ratio > 2) {
      return false;
    }
    
    // Sign of the critical resolved shear stress
    const auto sgn = tau > 0 ? 1 : -1;
    
    // Power low slip rate exponent
    auto n = 1.0 / xm;
    
    // Plastic strain rate calculations
    const auto v = ao * pow(stress_ratio, n);
    const auto dv = n * ao * v / (max(stress_ratio, seps));
    
    // Residual of gammadot parameter and derivatives
    fg[i] -= dt * v * sgn;
    dfg_ddeel(i) = -dt * dv * (ss.mu[i] | dM_ddeel);
    
    
    
    //const auto sgn_gi = dg(i) > 0 ? 1 : -1;
    //const auto dda_ddg =
    //    (1 - d * a[i] * sgn_gi) / (power<2>(1 + theta * d * abs(dg[i])));
    
    
    // dfg_ddg(i, i) += dt * dv * C * theta * dda_ddg;
    
    // dfg_ddg tiene conto della derivata di slip_resistance
    // rispetto a rho_ssd
    
    dfg_ddg(i, i) += 0.0;
    
    for (size_type j = 0; j != Nss; ++j) {
      const auto sgn_gj = dg(j) > 0 ? 1 : -1;
      const auto dr = Q * m(i, j) * theta * b * exp_bp[j] * sgn_gj;
      dfg_ddg(i, j) += dt * dv * dr * sgn;
    }
  } // End loop over slip systems
}

// Update p and rho_ssd
@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    
    p[i] += abs(dg[i]);
    
    rho_ssd[i] += () * abs(dg[i]);
    
    //const auto da =  //
    //    (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    // a[i] += da;
  }
}
